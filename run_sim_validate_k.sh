"""This bash script runs the simulations validating the empirical necessary ks.

This bash script calls the python script `validate_k.py`.
This script is meant to parallelize runs over values of lambda and q on a 
TORQUE system. This bash script consumes files stored in a folder 
`splined_sufficient_k`, one for each topology and algorithm/metric combination.
These files contains ks found in simulations for combinations of lambda and q, 
which can be generated by the notebook `Get sufficient k from main simulations.ipynb`.
On every line of these files there is a tabbed combination of lambda, q, and k. 
An example run would then use:

    qsub -t 1-108 run_sim_validate_k.sh

if there are 108 lines in the file. For each arrayed job generated, the 
k from simulations with all combinations of algorithms, topologies, and 
reconstruction metrics specified will be validated with addiitonal topologies
and mutation datasets. Populates a folder `results/validate_k`, which should be
made prior to running.
"""

#!/bin/bash

# *** "#PBS" lines must come before any non-blank, non-comment lines ***### Set the job name
### Job's Name
#PBS -N Theory Paper simulation
### Redirect stdout and stderr by first telling Torque to redirect do /dev/null and then redirecting yourself via exec. This is the way the IT recommends.
#PBS -e localhost:/dev/null
#PBS -o localhost:/dev/null
### Set the queue to which to send
#PBS -q yosef3
### Limit the resources used
#PBS -l nodes=1:ppn=1
### Change the walltime and cpu time limit from their default (the default is currently an hour)
#PBS -l walltime=2000:00:00
#PBS -l cput=20000:00:00
### Move all your environment variables to the job
#PBS -V


### Change to the directory where the job was submitted
workdir=$PBS_O_WORKDIR

### Get the array ID
t=$PBS_ARRAYID

### Set the log location to record stderr and stdout
exec 2> $workdir/log/_log.stderr_$t > $workdir/log/_log.stdout_$t

### Specify the python script that runs the simulation script
SIM_SCRIPT="$workdir/scripts/validate_k.py"

### Specify the strings indicating the topologies, algorithms, and 
### reconstruction metrics to be included in the run
topologies=(complete_binary exponential_plus_c)
algs=(percolation shared_mutation) 
metrics=(rf d_triplets d_triplets_20)

depth=9

for topology in ${topologies[@]};
do
    for alg in ${algs[@]};
    do

        ### Make the folder for this topology if it doesn't exist
        if [ ! -d "$workdir/results/validate_k/${topology}" ]; then
            mkdir -p "$workdir/results/validate_k/${topology}";
        fi

        for metric in ${metrics[@]};
        do
            ### Skip over combinations that are not meant to be run
            if [[ $alg == "shared_mutation" ]] && [[ $metric == "d_triplets" ]]; then
                echo "skipped d_triplets + shared_mutation combo"
                continue
            fi

            if [[ $alg == "shared_mutation" ]] && [[ $metric == "d_triplets_20" ]]; then
                echo "skipped d_triplets_20 + shared_mutation combo"
                continue
            fi

            ### Read in lambda, q, and k values from line t from the file of 
            ### containing sufficient ks for each lambda and q combination for 
            ### each topology/algorithm/metric combination
            content=`sed -n "$t p" $workdir/splined_sufficient_k/$topology/${alg}_${metric}.txt`
            q=$(cut -f1 <<<"$content")
            lamb=$(cut -f2 <<<"$content")
            k=$(cut -f3 <<<"$content")

            ### If the original k found is a nan, write nothing to output
            if [[ $k == "NaN" ]]; then
                echo "$lamb $q $topology $alg $metric: skipped due to NaN"
                continue
            fi

            ### Make the folder for this alg/metric combination if it doesn't exist
            if [ ! -d "$workdir/validate_k/${topology}/${alg}_${metric}" ]; then
                mkdir -p "$workdir/validate_k/${topology}/${alg}_${metric}";
            fi

            ### Generate the output file at the output folder, with a name 
            ### specified by the job index
            SAVE_FILE="$workdir/validate_k/${topology}/${alg}_${metric}/${t}.txt"

            ### Run the simulation script with the specified parameters, logging the command
            cmd="python ${SIM_SCRIPT} $lamb $q $k $depth $topology $alg $metric ${SAVE_FILE}"
            echo $cmd
            ${cmd}
        done
    done
done

